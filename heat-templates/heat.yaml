heat_template_version: 2016-04-08

description: >
 Template pour créer une instance

#####################################################################
##                                                                 ##
## DEFINITION DES PARAMETRES ET DE LEURS VALEURS PAR DEFAUT        ##
##                                                                 ##
#####################################################################
parameters:

  key_name:
    type: string
    description: Valeur de la clé publique SSH permettant d'accéder aux serveurs
    default: toto

  public_network:
    type: string
    description: ID reseau public
    default: babar

  dns_nameservers:
    type: comma_delimited_list
    label: DNS nameservers
    description: dns_nameservers=8.8.8.8,8.8.4.4

  bastion_infra:
    type: string
    description: Adresse IP du l’infra PI utilisé pour la dataprep
    default: 10.228.245.5

  image_id:
    type: string
    description: Glance Image
    default: "debian10-mi-20200212"

  instance_type:
    type: string
    description: Flavor
    default: z2.standard-pi-4.16

  volume_size:
    type: string
    description: Taille du volume de données du serveur de preprop
    default: 10

  volume_type:
    type: string
    description: Type du volume de données du serveur de preprop
    default: vsa-z3

  availability_zone_1:
    type: string
    default: "AZ1"

  no_proxy:
    type: string
    label: no_proxy variable
    default: ""
  http_proxy:
    type: string
    hidden: true
    label: http_proxy variable
    default: ""
  https_proxy:
    type: string
    hidden: true
    label: https_proxy variable
    default: ""
  os_auth_token:
    type: string
    label: openstack OS_AUTH_TOKEN
  os_storage_url:
    type: string
    label: openstack OS_STORAGE_URL
  app_version:
    type: string
    label: Git app branch, or tag to checkout on

  data_volume_id:
    type: string
    description: id for data volume created manually

  data_storage:
    type: string
    label: swift data_storage
  data_storage_token:
    type: string
    label: openstack token

  wait_condition_timeout:
    type: number
    default: 2400
    description : >
      timeout for the Wait Conditions


resources:
  # Provide a curl CLI command to the cloud-init script.  Called on completion
  # to indicate the status of the cloud-init process
  wait_handle:
    type: OS::Heat::WaitConditionHandle

  # Wait for the node_boot (cloud-init) process to complete or time out
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: {get_param: wait_condition_timeout}


#####################################################################
##                                                                 ##
## DEFINITION DES RESEAUX                                          ##
##                                                                 ##
#####################################################################
  dev_server_network:
    type: OS::Neutron::Net
    properties:
      name: presentation

  dev_server_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: dev_server_network }
      allocation_pools:
      - {start: 192.168.1.20, end: 192.168.1.250}
      cidr: 192.168.1.0/24
      gateway_ip: 192.168.1.254
      dns_nameservers: { get_param: dns_nameservers }
      ip_version: 4


#####################################################################
##                                                                 ##
## DEFINITION DU ROUTEUR                                           ##
##                                                                 ##
#####################################################################
  router:
    type: OS::Neutron::Router
    properties:
      name: routeur
      external_gateway_info:
        network: { get_param: public_network }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: dev_server_subnet }
#####################################################################
##                                                                 ##
## DEFINITION DU REGLES DE SECURITE                                ##
##                                                                 ##
#####################################################################
  dev_server_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Presentation security group
      rules:
        - remote_ip_prefix: "0.0.0.0/0"
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
          direction: ingress
        - remote_ip_prefix: "0.0.0.0/0"
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
          direction: ingress
        - remote_ip_prefix: { get_param: bastion_infra }
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
          direction: ingress
#####################################################################
##                                                                 ##
## DEFINITION DU SERVEUR                                           ##
##                                                                 ##
#####################################################################
  dev_server:
    type: OS::Nova::Server
    properties:
      name: dev_server
      flavor: { get_param: instance_type }
      availability_zone: { get_param: availability_zone_1 }
      key_name: { get_param: key_name }
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : volume }, delete_on_termination : "true" }]
      networks:
        - port: { get_resource: port }
      user_data_format: RAW
      user_data: { get_resource: postinstall_dev_server }

  postinstall_dev_server:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: { get_resource: included_files }
        - config: { get_resource: data_volume_attachment }
        - config: { get_resource: configure_dev_server }
        - config: { get_resource: back_postconf }
        - config: { get_resource: postinstall }

  included_files:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/common_functions.sh
          permissions: 0700
          content:
            str_replace:
              params:
                $wc_notify: {get_attr: [wait_handle, curl_cli]}
              template: { get_file: config-scripts/common_functions.sh }
        - path: /home/debian/.gitconfig
          owner: debian:debian
          permissions: 0600
          content:
            str_replace:
              params:
                $http_proxy: { get_param: http_proxy }
                $https_proxy: { get_param: https_proxy }
              template: { get_file: config-scripts/.gitconfig }
        - path: /home/debian/launch.sh
          owner: debian:debian
          permissions: 0700
          content:
            str_replace:
              params:
                $data_storage: { get_param: data_storage }
                $data_storage_token: { get_param: data_storage_token }
                $app_version: { get_param: app_version }
              template: { get_file: config-scripts/launch.sh }


  configure_dev_server:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/.openrc.sh
          owner: debian:debian
          permissions: 0600
          content:
            str_replace:
              params:
                $os_auth_token: { get_param: os_auth_token }
                $os_storage_url: { get_param: os_storage_url }
                $http_proxy: { get_param: http_proxy }
                $https_proxy: { get_param: https_proxy }
                $no_proxy: { get_param: no_proxy }

              template: { get_file: config-scripts/openrc.sh }

  back_postconf:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: config-scripts/back_postconf.sh }
          params:
            $no_proxy: { get_param: no_proxy }
            $dns_nameservers: { get_param: dns_nameservers }

  postinstall:
    type: "OS::Heat::SoftwareConfig"
    depends_on: back_postconf
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: config-scripts/post_install.sh }
          params:
            $no_proxy: { get_param: no_proxy }

  data_volume_attachment:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: config-scripts/data_volume_attachment.sh }
          params:
            $volume_id: { get_param: data_volume_id }


  volume:
    type: OS::Cinder::Volume
    properties:
      name: volume
      size: { get_param: volume_size }
      image: { get_param: image_id }
      volume_type: { get_param: volume_type }

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_param: data_volume_id }
      instance_uuid: { get_resource: dev_server }


  port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: dev_server_network }
      security_groups:
        - { get_resource: dev_server_secgroup }
      fixed_ips:
        - subnet_id: { get_resource: dev_server_subnet }

  dev_server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: dev_server_floating_ip }
      server_id: { get_resource: dev_server }

outputs:

  dev_server_floating_ip:
    description: adresse IP publique du serveur de dataprep
    value: { get_attr: [ dev_server_floating_ip, floating_ip_address ] }

  dev_server:
    description: Name of the server
    value: { get_attr: [ dev_server, name ] }
